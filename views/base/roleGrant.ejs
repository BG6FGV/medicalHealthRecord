<script type="text/javascript">

    $(function () {
        $('#resourceTree').tree({
            title:'资源',
            url:'/resource/getTree',
            panelHeight:'auto',
            panelMaxHeight:200,
            editable:false,
            animate:true,
            lines:true,
            checkbox:true,
            //cascadeCheck:false,
            onLoadSuccess:function (node, data) {
                checkOfIds("resourceTree","<%=grant%>".split(","));
            }
        });
    });

    /**
     * 使树中的所有节点都被选中
     **/
    function selectAll()
    {
        setTreeNodeChecked("resourceTree",1);
    }

    /**
     * 使树中的所有节点都被不选中
     **/
    function unSelectAll()
    {
        setTreeNodeChecked("resourceTree",2);
    }

    /**
     * 使树中的所有节点都被反选
     **/
    function inverse()
    {
        setTreeNodeChecked("resourceTree",3);
    }

    /**
     * 根据getRoots参数设置树的所有的节点的选中状态
     * @param treeId 树的id
     * @param status 1：使所有节点被选中；2：使用所有节点不被选中；3：反选节点。
     **/
    function setTreeNodeChecked(treeId,status)
    {
        var treeObj = $('#'+treeId);
        var rootNodes = treeObj.tree("getRoots");

        if(status == 1)
        {
            rootNodes.forEach(function (item,index,array) {
                treeObj.tree("check",item.target);
            });
        }
        else if(status == 2)
        {
            rootNodes.forEach(function (item,index,array) {
                treeObj.tree("uncheck",item.target);
            });
        }
        else if(status == 3)
        {
            var unchecknodes = treeObj.tree('getChecked', 'unchecked');
            var checknodes = treeObj.tree('getChecked');

            if (unchecknodes && unchecknodes.length > 0)
            {
                for ( var i = 0; i < unchecknodes.length; i++)
                {
                    treeObj.tree('check', unchecknodes[i].target);
                }
            }
            if (checknodes && checknodes.length > 0)
            {
                for ( var i = 0; i < checknodes.length; i++)
                {
                    treeObj.tree('uncheck', checknodes[i].target);
                }
            }
        }
    }


    /**
     * 通过树节点的id数组使相应的节点被勾选
     * @param {String} treeId   树的id
     * @param {Array}   idArray 树节点的id数组
     **/
    function checkOfIds(treeId,idArray)
    {
        var treeObj = $('#'+treeId);
        for(var i=0;i<idArray.length;i++)
        {
            var target = treeObj.tree('find', idArray[i]).target;
            treeObj.tree('check', target);
        }

        var checkedNodes = treeObj.tree('getChecked');
        if(checkedNodes.length>0)
        {
            for(var j=0;j<checkedNodes.length;j++)
            {
                if(idArray.indexOf(checkedNodes[j].id) == -1)
                {
                    treeObj.tree('uncheck',checkedNodes[j].target);
                }
            }
        }

        //使第二级节点折叠
        var roots = treeObj.tree('getRoots');
        for (var i = 0; i < roots.length; i++)
        {
            var childrens = treeObj.tree('getChildren', roots[i].target);
            for (var j = 0; j < childrens.length; j++)
            {
                var treeNodes = treeObj.tree('getChildren', childrens[j].target);
                if (treeNodes.length > 0)
                {
                    treeObj.tree('collapse', childrens[j].target);
                }
            }
        }
    }

    /* 页面接口 */
    var dialogHook = {
        /**
         * 供主页面使用的,当前窗口内的表单的提交方法
         *
         * @param callback 回调函数
         *
         */
        submitForm: function(callback){
            if( typeof callback == "function" )
            {
                var selectNodes = $('#resourceTree').tree("getChecked");//获取确定选中的节点
                var notSureNodes = $('#resourceTree').tree('getChecked', 'indeterminate');//获取不确定选中的节点

                var selectNodeIds = [];//确定选中和不确定选中的节点的id数组

                for(var i=0;i<selectNodes.length;i++)
                {
                    selectNodeIds.push(selectNodes[i].id);
                }
                for(var i=0;i<notSureNodes.length;i++)
                {
                    selectNodeIds.push(notSureNodes[i].id);
                }

                $.post("/role/grant",{id:"<%=id%>",nodeIds:JSON.stringify(selectNodeIds)},function (result) {callback(result);},"json");
            }
            else
            {
                throw new error("callback参数的类必须为函数");
            }
        }
    };

</script>

<style>
    .btn-group{
        display:inline-block;
        width: 30%;
        text-align: center;
    }

</style>

<div style="padding: 3px;">
    <div style="height: 390px;">
        <div id="resourceTree"></div>
    </div>
    <div style="margin-top: 5px;">
        <div class="btn-group">
            <a id="selectAll" href="#" class="easyui-linkbutton" onclick="selectAll()">全选</a>
        </div>
        <div class="btn-group">
            <a id="unSelectAll" href="#" class="easyui-linkbutton" onclick="unSelectAll()">全不选</a>
        </div>
        <div class="btn-group">
            <a id="inverse" href="#" class="easyui-linkbutton" onclick="inverse()">反选</a>
        </div>
    </div>
</div>